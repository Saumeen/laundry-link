generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique // SUPER_ADMIN, OPERATION_MANAGER, DRIVER, FACILITY_TEAM
  description String?
  permissions String[] // Array of permission strings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  staff       Staff[]

  @@map("roles")
}

model Staff {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  firstName     String
  lastName      String
  phone         String?
  password      String
  roleId        Int
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  profileImage  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  role          Role      @relation(fields: [roleId], references: [id])
  orderUpdates  OrderUpdate[]
  driverAssignments DriverAssignment[]
  createdOrders Order[]   @relation("CreatedByStaff")
  orderProcessing OrderProcessing[]
  issueReports  IssueReport[]

  @@map("staff")
}

// ===== CUSTOMER SYSTEM =====
model Customer {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  firstName       String
  lastName        String
  phone           String?
  password        String?
  isActive        Boolean   @default(false)
  activationToken String?   @unique
  walletBalance   Float     @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  addresses       Address[]
  orders          Order[]

  @@map("customers")
}

model Address {
  id           Int      @id @default(autoincrement())
  customerId   Int
  label        String
  addressLine1 String
  addressLine2 String?
  city         String
  area         String?
  building     String?
  floor        String?
  apartment    String?
  landmark     String?
  contactNumber String?
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  address      String?
  locationType String?  @default("flat")
  latitude     Float?
  longitude    Float?
  
  // Relations
  customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orders       Order[]

  @@map("addresses")
}

// ===== ORDER SYSTEM =====
model Order {
  id                  Int           @id @default(autoincrement())
  orderNumber         String        @unique
  customerId          Int
  addressId           Int?
  status              String        @default("Order Placed")
  pickupTime          DateTime
  deliveryTime        DateTime
  specialInstructions String?
  customerFirstName   String
  customerLastName    String
  customerEmail       String
  customerPhone       String
  customerAddress     String
  invoiceTotal        Float?
  minimumOrderApplied Boolean       @default(false)
  paymentStatus       String        @default("Pending")
  paymentMethod       String?
  notes               String?       // General order notes
  createdByStaffId    Int?          // Track which staff member created the order
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  
  // Relations
  orderServiceMappings OrderServiceMapping[]
  address             Address?      @relation(fields: [addressId], references: [id])
  customer            Customer      @relation(fields: [customerId], references: [id])
  orderUpdates        OrderUpdate[]
  driverAssignments   DriverAssignment[]
  createdByStaff      Staff?        @relation("CreatedByStaff", fields: [createdByStaffId], references: [id])
  orderProcessing     OrderProcessing?

  @@map("orders")
}

model OrderServiceMapping {
  id        Int      @id @default(autoincrement())
  orderId   Int
  serviceId Int
  quantity  Int      @default(1)
  price     Float    // Price at the time of order
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  order         Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  service       Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  processingItems ProcessingItem[]
  orderItems    OrderItem[] // New relation for individual items

  @@unique([orderId, serviceId])
  @@map("order_service_mappings")
}

// ===== ORDER ITEMS SYSTEM =====
model OrderItem {
  id                    Int      @id @default(autoincrement())
  orderServiceMappingId Int
  itemName              String   // e.g., "Shirt/T-shirt", "Pants", "Towel"
  itemType              String   // e.g., "clothing", "bedding", "accessories"
  quantity              Int      @default(1)
  pricePerItem          Float    // Price per individual item
  totalPrice            Float    // quantity * pricePerItem
  notes                 String?  // Special instructions for this item
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  orderServiceMapping   OrderServiceMapping @relation(fields: [orderServiceMappingId], references: [id], onDelete: Cascade)
  processingItemDetails ProcessingItemDetail[]

  @@map("order_items")
}

model OrderUpdate {
  id        Int      @id @default(autoincrement())
  orderId   Int
  staffId   Int?
  status    String
  notes     String?
  createdAt DateTime @default(now())
  
  // Relations
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  staff     Staff?   @relation(fields: [staffId], references: [id])

  @@map("order_updates")
}

model DriverAssignment {
  id              Int      @id @default(autoincrement())
  orderId         Int
  driverId        Int
  assignmentType  String   // 'pickup' or 'delivery'
  status          String   @default("assigned") // 'assigned', 'in_progress', 'completed', 'cancelled', 'rescheduled'
  estimatedTime   DateTime?
  actualTime      DateTime?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  driver          Staff    @relation(fields: [driverId], references: [id])
  photos          DriverPhoto[]

  @@map("driver_assignments")
}

model DriverPhoto {
  id                  Int      @id @default(autoincrement())
  driverAssignmentId  Int
  photoUrl            String
  photoType           String   // 'pickup_photo', 'delivery_photo', 'issue_photo'
  description         String?
  latitude            Float?
  longitude           Float?
  createdAt           DateTime @default(now())
  
  // Relations
  driverAssignment    DriverAssignment @relation(fields: [driverAssignmentId], references: [id], onDelete: Cascade)

  @@map("driver_photos")
}

// ===== FACILITY TEAM SYSTEM =====
model OrderProcessing {
  id                  Int      @id @default(autoincrement())
  orderId             Int
  staffId             Int
  processingStatus    String   // 'pending', 'in_progress', 'completed', 'quality_check', 'ready_for_delivery'
  totalPieces         Int?
  totalWeight         Float?
  processingNotes     String?
  qualityScore        Int?     // 1-100
  processingStartedAt DateTime?
  processingCompletedAt DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  order               Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  staff               Staff    @relation(fields: [staffId], references: [id])
  processingItems     ProcessingItem[]
  issueReports        IssueReport[]

  @@unique([orderId])
  @@map("order_processing")
}

model ProcessingItem {
  id                  Int      @id @default(autoincrement())
  orderProcessingId   Int
  orderServiceMappingId Int
  quantity            Int
  processedQuantity   Int      @default(0)
  status              String   // 'pending', 'in_progress', 'completed', 'issue_reported'
  notes               String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  orderProcessing     OrderProcessing @relation(fields: [orderProcessingId], references: [id], onDelete: Cascade)
  orderServiceMapping OrderServiceMapping @relation(fields: [orderServiceMappingId], references: [id])
  processingItemDetails ProcessingItemDetail[] // New relation for item-level processing

  @@map("processing_items")
}

// ===== PROCESSING ITEM DETAILS =====
model ProcessingItemDetail {
  id                  Int      @id @default(autoincrement())
  processingItemId    Int
  orderItemId         Int
  quantity            Int      @default(1)
  processedQuantity   Int      @default(0)
  status              String   // 'pending', 'in_progress', 'completed', 'issue_reported'
  processingNotes     String?
  qualityScore        Int?     // 1-100 for individual item quality
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  processingItem      ProcessingItem @relation(fields: [processingItemId], references: [id], onDelete: Cascade)
  orderItem           OrderItem @relation(fields: [orderItemId], references: [id])

  @@map("processing_item_details")
}

model IssueReport {
  id                  Int      @id @default(autoincrement())
  orderProcessingId   Int
  staffId             Int
  issueType           String   // 'damage', 'stain', 'missing_item', 'wrong_item', 'other'
  description         String
  severity            String   // 'low', 'medium', 'high', 'critical'
  status              String   // 'reported', 'investigating', 'resolved', 'escalated'
  resolution          String?
  photoUrl            String?
  reportedAt          DateTime @default(now())
  resolvedAt          DateTime?
  
  // Relations
  orderProcessing     OrderProcessing @relation(fields: [orderProcessingId], references: [id], onDelete: Cascade)
  staff               Staff    @relation(fields: [staffId], references: [id])

  @@map("issue_reports")
}

// ===== NEXT AUTH MODELS =====
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  
  // Relations
  accounts      Account[]
  sessions      Session[]

  @@map("auth_users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  
  // Relations
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])

  @@map("auth_accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])

  @@map("auth_verification_tokens")
}

// ===== PRICING SYSTEM =====
model PricingCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique // e.g., "IRON / PRESS", "WASH AND IRON", "DRY CLEAN", "BEDDINGS", "WASH AND FOLD"
  displayName String   // e.g., "Iron / Press", "Wash & Iron", "Dry Clean", "Beddings", "Wash & Fold"
  description String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  items       PricingItem[]

  @@map("pricing_categories")
}

model PricingItem {
  id          Int      @id @default(autoincrement())
  categoryId  Int
  name        String   // e.g., "SHIRT / TSHIRT", "THAWB", "ABAYA"
  displayName String   // e.g., "Shirt / T-shirt", "Thawb", "Abaya"
  price       Float
  description String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  category    PricingCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  servicePricingMappings ServicePricingMapping[]

  @@map("pricing_items")
}

model PricingHeader {
  id          Int      @id @default(autoincrement())
  title       String   // e.g., "Laundry Link"
  subtitle    String?  // e.g., "NORMAL SERVICE (24HRS)"
  subtitleAr  String?  // Arabic subtitle
  priceListTitle String? // e.g., "PRICE LIST"
  priceListTitleAr String? // Arabic price list title
  contactInfo String?  // e.g., "TEL: +973 33440841"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("pricing_headers")
}

// ===== ENUMS =====
enum PricingType {
  BY_WEIGHT
  BY_PIECE
}

enum PricingUnit {
  KG
  PIECE
}

// ===== SERVICE SYSTEM =====
model Service {
  id          Int         @id @default(autoincrement())
  name        String      @unique // e.g., "wash-fold", "dry-cleaning", "ironing", "express-service", "bedding-linens", "stain-removal"
  displayName String      // e.g., "Wash & Fold", "Dry Cleaning", "Ironing", "Express Service", "Bedding & Linens", "Stain Removal"
  description String      // e.g., "Professional washing service"
  pricingType PricingType // BY_WEIGHT or BY_PIECE
  pricingUnit PricingUnit // KG or PIECE
  price       Float       // Price in BD
  unit        String      // e.g., "per kg", "per item"
  turnaround  String      // e.g., "24 hours", "48 hours", "8 hours"
  category    String      // e.g., "regular", "premium"
  features    String[]    // Array of features
  isActive    Boolean     @default(true)
  sortOrder   Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  orderServiceMappings OrderServiceMapping[]
  servicePricingMappings ServicePricingMapping[]

  @@map("services")
}

// ===== SERVICE PRICING MAPPING SYSTEM =====
model ServicePricingMapping {
  id          Int      @id @default(autoincrement())
  serviceId   Int
  pricingItemId Int
  isDefault   Boolean  @default(false) // Whether this is the default pricing for this service
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  pricingItem PricingItem @relation(fields: [pricingItemId], references: [id], onDelete: Cascade)

  @@unique([serviceId, pricingItemId])
  @@map("service_pricing_mappings")
}


