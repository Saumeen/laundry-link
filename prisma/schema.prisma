generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  firstName       String
  lastName        String
  phone           String?
  password        String?
  isActive        Boolean   @default(false)
  activationToken String?   @unique
  walletBalance   Float     @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  addresses       Address[]
  orders          Order[]

  @@map("customers")
}

model Address {
  id           Int      @id @default(autoincrement())
  customerId   Int
  label        String
  addressLine1 String
  addressLine2 String?
  city         String
  area         String?
  building     String?
  floor        String?
  apartment    String?
  landmark     String?
  contactNumber String?
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  address      String?
  locationType String?  @default("flat")
  latitude     Float?
  longitude    Float?
  customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orders       Order[]

  @@map("addresses")
}

model Order {
  id                  Int           @id @default(autoincrement())
  orderNumber         String        @unique
  customerId          Int
  addressId           Int?
  status              String        @default("Order Placed")
  items               String[]
  totalAmount         Float
  pickupTime          DateTime
  deliveryTime        DateTime
  serviceType         String
  specialInstructions String?
  customerFirstName   String
  customerLastName    String
  customerEmail       String
  customerPhone       String
  customerAddress     String
  invoiceTotal        Float?
  minimumOrderApplied Boolean       @default(false)
  paymentStatus       String        @default("Pending")
  paymentMethod       String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  invoiceItems        InvoiceItem[]
  address             Address?      @relation(fields: [addressId], references: [id])
  customer            Customer      @relation(fields: [customerId], references: [id])

  @@map("orders")
}

model InvoiceItem {
  id           Int      @id @default(autoincrement())
  orderId      Int
  itemType     String
  serviceType  String
  quantity     Int
  pricePerItem Float
  totalPrice   Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

// NextAuth.js models for Prisma Adapter
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("auth_users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])

  @@map("auth_accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])

  @@map("auth_verification_tokens")
}
