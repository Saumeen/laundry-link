import { NextRequest, NextResponse } from 'next/server';
import prisma from '@/lib/prisma';
import {
  requireAuthenticatedCustomer,
  createAuthErrorResponse,
} from '@/lib/auth';
import { generateInvoicePDF } from '@/lib/utils/invoiceUtils';

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ orderId: string }> }
) {
  try {
    // Get authenticated customer
    const authenticatedCustomer = await requireAuthenticatedCustomer();
    const { orderId } = await params;

    if (!orderId) {
      return NextResponse.json(
        { error: 'Order ID is required' },
        { status: 400 }
      );
    }

    // Fetch order with all related data, ensuring it belongs to the customer
    const order = await prisma.order.findFirst({
      where: {
        id: parseInt(orderId),
        customerId: authenticatedCustomer.id,
      },
      include: {
        customer: true,
        address: true,
        orderServiceMappings: {
          include: {
            service: true,
            orderItems: true,
          },
        },
      },
    });

    if (!order) {
      return NextResponse.json({ error: 'Order not found' }, { status: 404 });
    }

    // Check if invoice has been generated by facility team
    if (!order.invoiceGenerated) {
      return NextResponse.json(
        {
          error: `Invoice is not available yet. Current status: ${order.status}. Invoice will be available when your order is ready for delivery.`,
        },
        { status: 400 }
      );
    }

    // Check if invoice is generated (has order items)
    const hasOrderItems = order.orderServiceMappings.some(
      mapping => mapping.orderItems && mapping.orderItems.length > 0
    );

    if (!hasOrderItems) {
      return NextResponse.json(
        {
          error:
            'Invoice not yet generated. Please wait for admin to process your order.',
        },
        { status: 400 }
      );
    }

    // Use the unified invoice generation function
    const result = await generateInvoicePDF(order.id);

    if (!result) {
      return NextResponse.json(
        { error: 'Failed to generate invoice PDF' },
        { status: 500 }
      );
    }

    // Return PDF as response
    return new NextResponse(result.pdfBuffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="invoice-${order.orderNumber}.pdf"`,
      },
    });
  } catch (error) {
    // Handle error silently

    if (error instanceof Error && error.message === 'Authentication required') {
      return createAuthErrorResponse();
    }

    return NextResponse.json(
      { error: 'Failed to generate PDF' },
      { status: 500 }
    );
  }
}
